---
version: "3"

tasks:
  create-kind:
    desc: "Create a kind cluster with one control plane and one worker node"
    cmds:
    - |
        cat > kind-config.yaml <<EOF
        kind: Cluster
        apiVersion: kind.x-k8s.io/v1alpha4
        nodes:
        - role: control-plane
        - role: worker
        EOF
        kind create cluster --name test-cluster --config kind-config.yaml
        rm kind-config.yaml

  destroy-stuck-ns:
    desc: "Remove finalizers from stuck Kubernetes namespaces"
    vars:
      PROXY_PORT: '{{ .PROXY_PORT | default "8001" }}'
    cmds:
      - |
        # Find all namespaces in Terminating state
        TERMINATING_NS=$(kubectl get ns --field-selector status.phase=Terminating -o jsonpath='{.items[*].metadata.name}')
        if [ -z "$TERMINATING_NS" ]; then
            echo "No stuck namespaces found"
            exit 0
        fi
        echo "Found stuck namespaces: $TERMINATING_NS"

        cleanup_proxy() {
            local proxy_pid=$1
            local proxy_port=$2
            if [ ! -z "$proxy_pid" ]; then
                # Kill the proxy and any child processes
                pkill -P $proxy_pid 2>/dev/null || true
                kill -9 $proxy_pid 2>/dev/null || true
                # Ensure no hanging processes
                if command -v lsof >/dev/null 2>&1; then
                    lsof -ti :$proxy_port | xargs -r kill -9 2>/dev/null || true
                else
                    fuser -k $proxy_port/tcp 2>/dev/null || true
                fi
            fi
        }

        # Kill any existing proxy on the port
        if command -v lsof >/dev/null 2>&1; then
            lsof -ti :{{ .PROXY_PORT }} | xargs -r kill -9 2>/dev/null || true
        else
            fuser -k {{ .PROXY_PORT }}/tcp 2>/dev/null || true
        fi

        # Process each namespace sequentially
        for ns in $TERMINATING_NS; do
            echo "Removing finalizers from namespace: $ns"

            # Retry loop to handle conflicts (409 errors)
            for attempt in {1..5}; do
                # Get the latest namespace definition
                if ! kubectl get namespace $ns -o json > "tmp_$ns.json"; then
                    echo "Failed to fetch namespace $ns, skipping."
                    break
                fi

                # Remove finalizers if they exist
                jq '.spec.finalizers = []' "tmp_$ns.json" > "tmp_clean_$ns.json"

                # Start proxy with cleanup
                kubectl proxy --port={{ .PROXY_PORT }} &
                PROXY_PID=$!

                # Wait for proxy to be ready
                for i in $(seq 1 10); do
                    if curl -s http://127.0.0.1:{{ .PROXY_PORT }} >/dev/null; then
                        break
                    fi
                    if [ $i -eq 10 ]; then
                        echo "Proxy failed to start for namespace: $ns"
                        cleanup_proxy $PROXY_PID {{ .PROXY_PORT }}
                        exit 1
                    fi
                    sleep 1
                done

                # Attempt to update the namespace
                RESPONSE=$(curl -s -w "%{http_code}" -o /dev/null -k -H "Content-Type: application/json" -X PUT --data-binary @"tmp_clean_$ns.json" \
                    http://127.0.0.1:{{ .PROXY_PORT }}/api/v1/namespaces/$ns/finalize)

                cleanup_proxy $PROXY_PID {{ .PROXY_PORT }}

                if [[ "$RESPONSE" == "200" ]]; then
                    echo "Successfully updated namespace: $ns"
                    break
                elif [[ "$RESPONSE" == "409" ]]; then
                    echo "Conflict detected for $ns (attempt $attempt). Retrying..."
                    sleep 2
                else
                    echo "Failed to update namespace: $ns with HTTP response $RESPONSE"
                    exit 1
                fi
            done

            rm -f "tmp_$ns.json" "tmp_clean_$ns.json"
            echo "Completed processing namespace: $ns"
        done

        echo "All stuck namespaces have been processed"

  list-node-pods:
    desc: "List all pods running on a specific node across all namespaces"
    vars:
      NODE_NAME: '{{ .NODE_NAME | default "node1" }}'
    cmds:
      - kubectl get pods --all-namespaces --field-selector spec.nodeName={{ .NODE_NAME }} -o wide

  setup-helm:
    desc: "Install and configure a Helm chart"
    vars:
      HELM_RELEASE: '{{ .HELM_RELEASE }}'
      HELM_CHART: '{{ .HELM_CHART }}'
      HELM_NAMESPACE: '{{ .HELM_NAMESPACE | default "default" }}'
      HELM_VERSION: '{{ .HELM_VERSION }}'
      HELM_VALUES: '{{ .HELM_VALUES | default "" }}'
      HELM_REPO_NAME: '{{ .HELM_REPO_NAME }}'
      HELM_REPO_URL: '{{ .HELM_REPO_URL }}'
    cmds:
      - helm repo add {{ .HELM_REPO_NAME }} {{ .HELM_REPO_URL }}
      - helm repo update
      - |
        helm upgrade --install {{ .HELM_RELEASE }} {{ .HELM_CHART }} \
          --namespace {{ .HELM_NAMESPACE }} \
          {{if .HELM_VERSION}}--version {{ .HELM_VERSION }}{{end}} \
          {{if .HELM_VALUES}}--values {{ .HELM_VALUES }}{{end}} \
          --create-namespace \
          --wait

  setup-argocd:
    desc: "Install ArgoCD using Helm"
    vars:
      ARGOCD_NAMESPACE: '{{ .ARGOCD_NAMESPACE | default "argocd" }}'
      ARGOCD_VERSION: '{{ .ARGOCD_VERSION | default "5.51.6" }}'
      ARGOCD_PASSWORD: '{{ .ARGOCD_PASSWORD | default "admin" }}'
    cmds:
      - task: setup-helm
        vars:
          HELM_RELEASE: argocd
          HELM_CHART: argo/argo-cd
          HELM_NAMESPACE: '{{ .ARGOCD_NAMESPACE }}'
          HELM_VERSION: '{{ .ARGOCD_VERSION }}'
          HELM_REPO_NAME: argo
          HELM_REPO_URL: https://argoproj.github.io/argo-helm
      - |
        PASSWORD=$(python3 -c 'import bcrypt; import sys; print(bcrypt.hashpw(sys.argv[1].encode("utf-8"), bcrypt.gensalt(10)).decode("utf-8"))' '{{ .ARGOCD_PASSWORD }}')

        helm upgrade argocd argo/argo-cd \
          --namespace {{ .ARGOCD_NAMESPACE }} \
          --version {{ .ARGOCD_VERSION }} \
          --set server.extraArgs[0]=--insecure \
          --set server.service.type=LoadBalancer \
          --set configs.secret.argocdServerAdminPassword="$PASSWORD" \
          --set configs.params.server.insecure=true \
          --set configs.cm."application\.resourceTrackingMethod"=annotation \
          --set configs.cm."timeout\.reconciliation"=180s \
          --set configs.cm."admin\.enabled"=true \
          --set configs.cm."kustomize\.buildOptions"="--enable-alpha-plugins" \
          --reuse-values \
          --wait
      - |
        echo "Waiting for ArgoCD server to be ready..."
        kubectl wait --for=condition=available --timeout=300s deployment/argocd-server -n {{ .ARGOCD_NAMESPACE }}
      - |
        echo "ArgoCD installed successfully"
        echo "Access UI with: kubectl port-forward svc/argocd-server -n {{ .ARGOCD_NAMESPACE }} 8080:443"
        echo "Default admin password is: {{ .ARGOCD_PASSWORD }}"

  setup-flux:
    desc: "Install Flux using Helm"
    vars:
      FLUX_NAMESPACE: '{{ .FLUX_NAMESPACE | default "flux-system" }}'
      FLUX_VERSION: '{{ .FLUX_VERSION | default "2.14.1" }}'
      FLUX_VALUES: '{{ .FLUX_VALUES }}'
    cmds:
      - task: setup-helm
        vars:
          HELM_RELEASE: flux
          HELM_CHART: fluxcd-community/flux2
          HELM_NAMESPACE: '{{ .FLUX_NAMESPACE }}'
          HELM_VERSION: '{{ .FLUX_VERSION }}'
          HELM_VALUES: '{{ .FLUX_VALUES }}'
          HELM_REPO_NAME: fluxcd-community
          HELM_REPO_URL: https://fluxcd-community.github.io/helm-charts
      - |
        echo "Waiting for Flux controllers to be ready..."
        kubectl wait --for=condition=available --timeout=300s deployment -l app.kubernetes.io/instance=flux -n {{ .FLUX_NAMESPACE }}
      - |
        echo "Flux installed successfully"
        echo "View resources with: kubectl get all -n {{ .FLUX_NAMESPACE }}"

  uninstall-argocd:
    desc: "Remove ArgoCD installation"
    vars:
      ARGOCD_NAMESPACE: '{{ .ARGOCD_NAMESPACE | default "argocd" }}'
    cmds:
      - helm uninstall argocd -n {{ .ARGOCD_NAMESPACE }}
      - kubectl delete namespace {{ .ARGOCD_NAMESPACE }}

  uninstall-flux:
    desc: "Remove Flux installation"
    vars:
      FLUX_NAMESPACE: '{{ .FLUX_NAMESPACE | default "flux-system" }}'
    cmds:
      - helm uninstall flux -n {{ .FLUX_NAMESPACE }}
      - kubectl delete namespace {{ .FLUX_NAMESPACE }}
