---
version: "3"

tasks:
  ensure-dependencies:
    desc: "Verify that 1Password CLI is installed"
    cmds:
      - |
        if ! command -v op &> /dev/null; then
          echo "'op' command not found. Please install 1Password CLI: https://developer.1password.com/docs/cli/get-started"
          exit 1
        fi

  setup-account:
    desc: "Set up 1Password CLI and authenticate with your account"
    deps:
      - ensure-dependencies
    vars:
      OP_ACCOUNT: "{{.OP_ACCOUNT | default \"my\"}}"
    cmds:
      - |
        # Ensure the op config directory exists
        mkdir -p "${HOME}/.config/op"

        # Check if we have an account specified
        if [ -z "{{.OP_ACCOUNT}}" ]; then
          echo "Please specify your 1Password account domain using the OP_ACCOUNT variable."
          echo "Example: task setup-account OP_ACCOUNT=my-team.1password.com"
          exit 1
        fi

        # Check if already signed in by using 'op whoami'
        if user_info=$(op whoami --account "{{.OP_ACCOUNT}}" 2>/dev/null); then
          # Extract email from whoami output
          email=$(echo "$user_info" | grep "Email:" | awk '{print $2}')

          echo "‚úÖ Already signed in to 1Password account {{.OP_ACCOUNT}}"
          echo "   Account email: $email"
          echo "   Your 1Password CLI is ready to use"
        else
          # Sign in to 1Password account
          echo "Setting up 1Password CLI with account {{.OP_ACCOUNT}}"
          op account add --address "{{.OP_ACCOUNT}}"

          echo "‚úÖ 1Password account setup complete."
          echo "   Use 'op signin' to authenticate your session."
          echo "   To verify your setup, run: op whoami"
        fi

  list-vaults:
    desc: "List all vaults in your 1Password account"
    deps:
      - ensure-dependencies
    cmds:
      - op vault list

  list-secrets:
    desc: "List secrets in a vault"
    deps:
      - ensure-dependencies
    vars:
      VAULT_NAME: "{{.VAULT_NAME | default \"\"}}"
      CATEGORY: "{{.CATEGORY | default \"\"}}"
    cmds:
      - |
        # Prepare vault filter if provided
        VAULT_FILTER=""
        if [ -n "{{.VAULT_NAME}}" ]; then
          VAULT_FILTER="--vault=\"{{.VAULT_NAME}}\""
        fi

        # Prepare category filter if provided
        CATEGORY_FILTER=""
        if [ -n "{{.CATEGORY}}" ]; then
          CATEGORY_FILTER="--categories=\"{{.CATEGORY}}\""
        fi

        # List the items
        eval "op item list $VAULT_FILTER $CATEGORY_FILTER"

  get-secret:
    desc: "Retrieve a secret from 1Password (by ID or name)"
    deps:
      - ensure-dependencies
    cmds:
      - |
        # Check required parameters
        if [ -z "{{.SECRET_NAME}}" ]; then
          echo "Please specify the secret name using the SECRET_NAME variable."
          exit 1
        fi

        # Check if signed in by using 'op whoami'
        if ! op whoami &>/dev/null; then
          echo "‚ùå Not signed in to 1Password. Please run 'task setup-account OP_ACCOUNT=your-account' first."
          exit 1
        fi

        # Check if jq is installed - it's needed for proper JSON parsing
        if ! command -v jq &> /dev/null; then
          echo "‚ö†Ô∏è 'jq' command not found. Using fallback method. For better reliability, install jq."
          JQ_AVAILABLE=false
        else
          JQ_AVAILABLE=true
        fi

        # Prepare vault filter if provided
        VAULT_FILTER=""
        if [ -n "{{.VAULT}}" ]; then
          VAULT_FILTER="--vault=\"{{.VAULT}}\""
        fi

        # Determine password field (default to "password" or try with custom field if specified)
        PASSWORD_FIELD="{{.FIELD}}"
        if [ -z "$PASSWORD_FIELD" ]; then
          PASSWORD_FIELD="password"
        fi

        FORMAT="{{.FORMAT}}"
        if [ -z "$FORMAT" ]; then
          FORMAT="json"
        fi

        # First, let's try to get information about the item to see its structure
        if [[ "{{.SECRET_NAME}}" =~ ^[a-zA-Z0-9]{26}$ ]]; then
          # This looks like an ID
          echo "üîç Looking up item with ID: {{.SECRET_NAME}}"
          ITEM_INFO=$(op item get "{{.SECRET_NAME}}" --format=json 2>/dev/null)
        else
          # This looks like a name
          echo "üîç Looking up item with name: {{.SECRET_NAME}}"
          if [ -n "{{.VAULT}}" ]; then
            ITEM_INFO=$(op item get "{{.SECRET_NAME}}" --vault="{{.VAULT}}" --format=json 2>/dev/null)
          else
            ITEM_INFO=$(op item get "{{.SECRET_NAME}}" --format=json 2>/dev/null)
          fi
        fi

        # If we found the item, extract its details and get the requested field
        if [ -n "$ITEM_INFO" ]; then
          # Extract item details based on whether jq is available
          if [ "$JQ_AVAILABLE" = true ]; then
            # Use jq for reliable JSON parsing
            ITEM_ID=$(echo "$ITEM_INFO" | jq -r '.id')
            ITEM_TITLE=$(echo "$ITEM_INFO" | jq -r '.title')
            ITEM_VAULT=$(echo "$ITEM_INFO" | jq -r '.vault.id')
            ITEM_VAULT_NAME=$(echo "$ITEM_INFO" | jq -r '.vault.name')

            # Debug: Print all fields and their purposes
            echo "üìã Available fields and their purposes:"
            echo "$ITEM_INFO" | jq -r '.fields[] | "   - \(.id): \(.purpose) (\(.type))"'

            # Extract password directly using 'purpose: PASSWORD'
            if [ "$PASSWORD_FIELD" = "password" ]; then
              # Try to find field with PURPOSE=PASSWORD first
              PASSWORD_ID=$(echo "$ITEM_INFO" | jq -r '.fields[] | select(.purpose=="PASSWORD") | .id')
              if [ -n "$PASSWORD_ID" ]; then
                echo "üîë Found password field with ID: $PASSWORD_ID"
                PASSWORD_FIELD="$PASSWORD_ID"
              fi
            fi
          else
            # Fallback to grep pattern matching (less reliable)
            ITEM_ID=$(echo "$ITEM_INFO" | grep -o '"id":"[^"]*"' | head -1 | cut -d'"' -f4)
            ITEM_TITLE=$(echo "$ITEM_INFO" | grep -o '"title":"[^"]*"' | head -1 | cut -d'"' -f4)
            ITEM_VAULT=$(echo "$ITEM_INFO" | grep -o '"vault":{[^}]*}' | grep -o '"id":"[^"]*"' | head -1 | cut -d'"' -f4)
            ITEM_VAULT_NAME=$(echo "$ITEM_INFO" | grep -o '"vault":{[^}]*}' | grep -o '"name":"[^"]*"' | head -1 | cut -d'"' -f4)
          fi

          echo "‚úÖ Found item: $ITEM_TITLE (ID: $ITEM_ID) in vault: $ITEM_VAULT_NAME"

          # Now retrieve the secret using the specific ID or title
          if [ -z "{{.OUTPUT_FILE}}" ]; then
            # Try multiple methods to get the password, starting with the most reliable

            # Method 1: Get by item ID and field ID directly
            if [ "$JQ_AVAILABLE" = true ] && [ -n "$PASSWORD_ID" ]; then
              echo "üì§ Trying to get password by item ID and field ID..."
              SECRET_VALUE=$(op item get "$ITEM_ID" --fields "$PASSWORD_ID" --reveal 2>/dev/null)
              if [ $? -eq 0 ] && [ -n "$SECRET_VALUE" ]; then
                echo "‚úÖ Secret retrieved successfully (Method 1)"
                echo "$SECRET_VALUE"
                exit 0
              fi
            fi

            # Method 2: Get by item ID and field label
            echo "üì§ Trying to get password by item ID and field label..."
            SECRET_VALUE=$(op item get "$ITEM_ID" --fields "$PASSWORD_FIELD" --reveal 2>/dev/null)
            if [ $? -eq 0 ] && [ -n "$SECRET_VALUE" ]; then
              echo "‚úÖ Secret retrieved successfully (Method 2)"
              echo "$SECRET_VALUE"
              exit 0
            fi

            # Method 3: Get using the reference path from the JSON
            if [ "$JQ_AVAILABLE" = true ]; then
              REF_PATH=$(echo "$ITEM_INFO" | jq -r --arg field "$PASSWORD_FIELD" '.fields[] | select(.id==$field or .label==$field) | .reference')
              if [ -n "$REF_PATH" ] && [ "$REF_PATH" != "null" ]; then
                echo "üì§ Trying to get password using reference path: $REF_PATH"
                SECRET_VALUE=$(op read "$REF_PATH" --reveal 2>/dev/null)
                if [ $? -eq 0 ] && [ -n "$SECRET_VALUE" ]; then
                  echo "‚úÖ Secret retrieved successfully (Method 3)"
                  echo "$SECRET_VALUE"
                  exit 0
                fi
              fi
            fi

            # Method 4: Last resort - try to get the entire item and parse manually
            echo "üì§ Trying alternative method to get password..."
            if [ "$FORMAT" = "text" ]; then
              op item get "$ITEM_ID" --format="$FORMAT" --reveal
              exit $?
            else
              # Try to get all fields as JSON and parse later
              op item get "$ITEM_ID" --reveal
              exit $?
            fi
          else
            # Save to file
            OUTPUT_PATH=$(eval echo "{{.OUTPUT_FILE}}")
            if op item get "$ITEM_ID" --fields "$PASSWORD_FIELD" > "$OUTPUT_PATH" 2>/dev/null; then
              echo "‚úÖ Secret saved to $OUTPUT_PATH"
              exit 0
            else
              echo "‚ùå Failed to save secret to file. Trying alternative method..."
              if op item get "$ITEM_ID" > "$OUTPUT_PATH" 2>/dev/null; then
                echo "‚úÖ Full item saved to $OUTPUT_PATH (you'll need to extract the password manually)"
                exit 0
              fi
            fi
          fi

          echo "‚ùå All methods to extract password failed."
          echo "üí° Try using the op client directly:"
          echo "  op item get \"$ITEM_TITLE\" --vault=\"$ITEM_VAULT_NAME\""
        else
          echo "‚ùå Item not found. Please check if '{{.SECRET_NAME}}' exists and you have access."

          # For debugging: list available items to help the user
          echo ""
          echo "Available items (first 10):"
          op item list --limit 10 | head -10
        fi

        exit 1

  create-vault:
    desc: "Create a new vault in 1Password"
    deps:
      - ensure-dependencies
    cmds:
      - |
        # Ensure VAULT_NAME is provided
        if [ -z "{{.VAULT_NAME}}" ]; then
          echo "Please specify the vault name using the VAULT_NAME variable."
          echo "Example: task create-vault VAULT_NAME=Development"
          exit 1
        fi

        # Create the vault
        echo "Creating new vault named '{{.VAULT_NAME}}'"
        op vault create "{{.VAULT_NAME}}"

        echo "Vault '{{.VAULT_NAME}}' created successfully."

  # TODO: WIP
  # store-secret:
  #   desc: "Store a secret in 1Password"
  #   deps:
  #     - ensure-dependencies
  #   vars:
  #     SECRET_NAME: "{{.SECRET_NAME | default \"\"}}"
  #     SECRET_VALUE: "{{.SECRET_VALUE | default \"\"}}"
  #     VAULT_NAME: "{{.VAULT_NAME | default \"\"}}"
  #     SECRET_CATEGORY: "{{.SECRET_CATEGORY | default \"Password\"}}"
  #     SECRET_NOTES: "{{.SECRET_NOTES | default \"\"}}"
  #   cmds:
  #     - |
  #       # Check required parameters
  #       if [ -z "{{.SECRET_NAME}}" ]; then
  #         echo "Please specify the secret name using the SECRET_NAME variable."
  #         exit 1
  #       fi

  #       if [ -z "{{.VAULT_NAME}}" ]; then
  #         echo "Please specify the vault name using the VAULT_NAME variable."
  #         exit 1
  #       fi

  #       # Check if we should read from stdin
  #       if [ -z "{{.SECRET_VALUE}}" ]; then
  #         echo "Enter the secret value (input will be hidden):"
  #         read -s SECRET_VALUE
  #         echo ""  # Add a newline after hidden input
  #       else
  #         SECRET_VALUE="{{.SECRET_VALUE}}"
  #       fi

  #       # Store the secret
  #       op item create \
  #         --category="{{.SECRET_CATEGORY}}" \
  #         --title="{{.SECRET_NAME}}" \
  #         --vault="{{.VAULT_NAME}}" \
  #         --notes="{{.SECRET_NOTES}}" \
  #         password="$SECRET_VALUE"

  #       echo "Secret '{{.SECRET_NAME}}' stored in vault '{{.VAULT_NAME}}'"

  # encrypt-file:
  #   desc: "Encrypt a file using 1Password"
  #   deps:
  #     - ensure-dependencies
  #   vars:
  #     INPUT_FILE: "{{.INPUT_FILE | default \"\"}}"
  #     OUTPUT_FILE: "{{.OUTPUT_FILE | default \"\"}}"
  #     VAULT_NAME: "{{.VAULT_NAME | default \"\"}}"
  #     DOCUMENT_TITLE: "{{.DOCUMENT_TITLE | default \"\"}}"
  #   cmds:
  #     - |
  #       # Ensure INPUT_FILE is provided
  #       if [ -z "{{.INPUT_FILE}}" ]; then
  #         echo "Please specify the input file to encrypt using the INPUT_FILE variable."
  #         exit 1
  #       fi

  #       # Expand the tilde in input path
  #       INPUT_PATH=$(eval echo "{{.INPUT_FILE}}")

  #       # Set document title if not provided
  #       if [ -z "{{.DOCUMENT_TITLE}}" ]; then
  #         DOCUMENT_TITLE=$(basename "$INPUT_PATH")
  #       else
  #         DOCUMENT_TITLE="{{.DOCUMENT_TITLE}}"
  #       fi

  #       # Prepare vault filter if provided
  #       VAULT_FILTER=""
  #       if [ -n "{{.VAULT_NAME}}" ]; then
  #         VAULT_FILTER="--vault=\"{{.VAULT_NAME}}\""
  #       fi

  #       # Store the file in 1Password
  #       eval "op document create \"$INPUT_PATH\" --title=\"$DOCUMENT_TITLE\" $VAULT_FILTER"

  #       # If OUTPUT_FILE is specified, also create a .op reference file
  #       if [ -n "{{.OUTPUT_FILE}}" ]; then
  #         OUTPUT_PATH=$(eval echo "{{.OUTPUT_FILE}}")
  #         echo "# This file is stored in 1Password" > "$OUTPUT_PATH"
  #         echo "# Title: $DOCUMENT_TITLE" >> "$OUTPUT_PATH"
  #         echo "# To retrieve: task decrypt-file DOCUMENT_TITLE=\"$DOCUMENT_TITLE\"" >> "$OUTPUT_PATH"
  #         echo "File encrypted and reference saved to $OUTPUT_PATH"
  #       fi

  # decrypt-file:
  #   desc: "Decrypt a file from 1Password"
  #   deps:
  #     - ensure-dependencies
  #   vars:
  #     DOCUMENT_TITLE: "{{.DOCUMENT_TITLE | default \"\"}}"
  #     DOCUMENT_ID: "{{.DOCUMENT_ID | default \"\"}}"
  #     OUTPUT_FILE: "{{.OUTPUT_FILE | default \"\"}}"
  #     VAULT_NAME: "{{.VAULT_NAME | default \"\"}}"
  #   cmds:
  #     - |
  #       # Ensure either DOCUMENT_TITLE or DOCUMENT_ID is provided
  #       if [ -z "{{.DOCUMENT_TITLE}}" ] && [ -z "{{.DOCUMENT_ID}}" ]; then
  #         echo "Please specify either the document title using DOCUMENT_TITLE or the document ID using DOCUMENT_ID."
  #         exit 1
  #       fi

  #       # Prepare vault filter if provided
  #       VAULT_FILTER=""
  #       if [ -n "{{.VAULT_NAME}}" ]; then
  #         VAULT_FILTER="--vault=\"{{.VAULT_NAME}}\""
  #       fi

  #       # Set identifier based on what was provided
  #       if [ -n "{{.DOCUMENT_TITLE}}" ]; then
  #         IDENTIFIER="{{.DOCUMENT_TITLE}}"
  #       else
  #         IDENTIFIER="{{.DOCUMENT_ID}}"
  #       fi

  #       # Set OUTPUT_FILE if not provided
  #       if [ -z "{{.OUTPUT_FILE}}" ]; then
  #         if [ -n "{{.DOCUMENT_TITLE}}" ]; then
  #           OUTPUT_FILE="{{.DOCUMENT_TITLE}}"
  #         else
  #           OUTPUT_FILE="document_from_1password"
  #         fi
  #       else
  #         OUTPUT_FILE=$(eval echo "{{.OUTPUT_FILE}}")
  #       fi

  #       # Retrieve the document from 1Password
  #       eval "op document get \"$IDENTIFIER\" $VAULT_FILTER --output=\"$OUTPUT_FILE\""

  #       echo "Document retrieved and saved to $OUTPUT_FILE"

  # delete-secret:
  #   desc: "Delete a secret from 1Password"
  #   deps:
  #     - ensure-dependencies
  #   vars:
  #     SECRET_NAME: "{{.SECRET_NAME | default \"\"}}"
  #     VAULT_NAME: "{{.VAULT_NAME | default \"\"}}"
  #   cmds:
  #     - |
  #       # Check required parameters
  #       if [ -z "{{.SECRET_NAME}}" ]; then
  #         echo "Please specify the secret name using the SECRET_NAME variable."
  #         exit 1
  #       fi

  #       # Prepare vault filter if provided
  #       VAULT_FILTER=""
  #       if [ -n "{{.VAULT_NAME}}" ]; then
  #         VAULT_FILTER="--vault=\"{{.VAULT_NAME}}\""
  #       fi

  #       # Ask for confirmation
  #       read -p "Are you sure you want to delete '{{.SECRET_NAME}}'? (y/N) " -n 1 -r
  #       echo    # Move to a new line
  #       if [[ $REPLY =~ ^[Yy]$ ]]; then
  #         # Delete the secret
  #         eval "op item delete \"{{.SECRET_NAME}}\" $VAULT_FILTER"
  #         echo "Secret '{{.SECRET_NAME}}' deleted."
  #       else
  #         echo "Operation cancelled."
  #       fi
