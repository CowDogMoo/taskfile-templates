---
version: "3"

tasks:
  ensure-dependencies:
    desc: "Verify that 1Password CLI is installed"
    cmds:
      - |
        if ! command -v op &> /dev/null; then
          echo "'op' command not found. Please install 1Password CLI: https://developer.1password.com/docs/cli/get-started"
          exit 1
        fi

  setup-account:
    desc: "Set up 1Password CLI and authenticate with your account"
    deps:
      - ensure-dependencies
    vars:
      OP_ACCOUNT: "{{.OP_ACCOUNT | default \"my\"}}"
    cmds:
      - |
        # Ensure the op config directory exists
        mkdir -p "${HOME}/.config/op"

        # Check if we have an account specified
        if [ -z "{{.OP_ACCOUNT}}" ]; then
          echo "Please specify your 1Password account domain using the OP_ACCOUNT variable."
          echo "Example: task setup-account OP_ACCOUNT=my-team.1password.com"
          exit 1
        fi

        # Check if already signed in by using 'op whoami'
        if user_info=$(op whoami --account "{{.OP_ACCOUNT}}" 2>/dev/null); then
          # Extract email from whoami output
          email=$(echo "$user_info" | grep "Email:" | awk '{print $2}')

          echo "✅ Already signed in to 1Password account {{.OP_ACCOUNT}}"
          echo "   Account email: $email"
          echo "   Your 1Password CLI is ready to use"
        else
          # Sign in to 1Password account
          echo "Setting up 1Password CLI with account {{.OP_ACCOUNT}}"
          op account add --address "{{.OP_ACCOUNT}}"

          echo "✅ 1Password account setup complete."
          echo "   Use 'op signin' to authenticate your session."
          echo "   To verify your setup, run: op whoami"
        fi

  create-vault:
    desc: "Create a new vault in 1Password"
    deps:
      - ensure-dependencies
    cmds:
      - |
        # Ensure VAULT_NAME is provided
        if [ -z "{{.VAULT_NAME}}" ]; then
          echo "Please specify the vault name using the VAULT_NAME variable."
          echo "Example: task create-vault VAULT_NAME=Development"
          exit 1
        fi

        # Create the vault
        echo "Creating new vault named '{{.VAULT_NAME}}'"
        op vault create "{{.VAULT_NAME}}"

        echo "Vault '{{.VAULT_NAME}}' created successfully."

  list-vaults:
    desc: "List all vaults in your 1Password account"
    deps:
      - ensure-dependencies
    cmds:
      - op vault list

  store-secret:
    desc: "Store a secret in 1Password"
    deps:
      - ensure-dependencies
    vars:
      SECRET_NAME: "{{.SECRET_NAME | default \"\"}}"
      SECRET_VALUE: "{{.SECRET_VALUE | default \"\"}}"
      VAULT_NAME: "{{.VAULT_NAME | default \"\"}}"
      SECRET_CATEGORY: "{{.SECRET_CATEGORY | default \"Password\"}}"
      SECRET_NOTES: "{{.SECRET_NOTES | default \"\"}}"
    cmds:
      - |
        # Check required parameters
        if [ -z "{{.SECRET_NAME}}" ]; then
          echo "Please specify the secret name using the SECRET_NAME variable."
          exit 1
        fi

        if [ -z "{{.VAULT_NAME}}" ]; then
          echo "Please specify the vault name using the VAULT_NAME variable."
          exit 1
        fi

        # Check if we should read from stdin
        if [ -z "{{.SECRET_VALUE}}" ]; then
          echo "Enter the secret value (input will be hidden):"
          read -s SECRET_VALUE
          echo ""  # Add a newline after hidden input
        else
          SECRET_VALUE="{{.SECRET_VALUE}}"
        fi

        # Store the secret
        op item create \
          --category="{{.SECRET_CATEGORY}}" \
          --title="{{.SECRET_NAME}}" \
          --vault="{{.VAULT_NAME}}" \
          --notes="{{.SECRET_NOTES}}" \
          password="$SECRET_VALUE"

        echo "Secret '{{.SECRET_NAME}}' stored in vault '{{.VAULT_NAME}}'"

  get-secret:
    desc: "Retrieve a secret from 1Password"
    deps:
      - ensure-dependencies
    vars:
      SECRET_NAME: "{{.SECRET_NAME | default \"\"}}"
      VAULT_NAME: "{{.VAULT_NAME | default \"\"}}"
      OUTPUT_FILE: "{{.OUTPUT_FILE | default \"\"}}"
    cmds:
      - |
        # Check required parameters
        if [ -z "{{.SECRET_NAME}}" ]; then
          echo "Please specify the secret name using the SECRET_NAME variable."
          exit 1
        fi

        # Prepare vault filter if provided
        VAULT_FILTER=""
        if [ -n "{{.VAULT_NAME}}" ]; then
          VAULT_FILTER="--vault=\"{{.VAULT_NAME}}\""
        fi

        # Retrieve the secret
        if [ -z "{{.OUTPUT_FILE}}" ]; then
          # Display to terminal
          eval "op item get \"{{.SECRET_NAME}}\" $VAULT_FILTER --fields password"
        else
          # Save to file
          OUTPUT_PATH=$(eval echo "{{.OUTPUT_FILE}}")
          eval "op item get \"{{.SECRET_NAME}}\" $VAULT_FILTER --fields password" > "$OUTPUT_PATH"
          echo "Secret '{{.SECRET_NAME}}' saved to $OUTPUT_PATH"
        fi

  encrypt-file:
    desc: "Encrypt a file using 1Password"
    deps:
      - ensure-dependencies
    vars:
      INPUT_FILE: "{{.INPUT_FILE | default \"\"}}"
      OUTPUT_FILE: "{{.OUTPUT_FILE | default \"\"}}"
      VAULT_NAME: "{{.VAULT_NAME | default \"\"}}"
      DOCUMENT_TITLE: "{{.DOCUMENT_TITLE | default \"\"}}"
    cmds:
      - |
        # Ensure INPUT_FILE is provided
        if [ -z "{{.INPUT_FILE}}" ]; then
          echo "Please specify the input file to encrypt using the INPUT_FILE variable."
          exit 1
        fi

        # Expand the tilde in input path
        INPUT_PATH=$(eval echo "{{.INPUT_FILE}}")

        # Set document title if not provided
        if [ -z "{{.DOCUMENT_TITLE}}" ]; then
          DOCUMENT_TITLE=$(basename "$INPUT_PATH")
        else
          DOCUMENT_TITLE="{{.DOCUMENT_TITLE}}"
        fi

        # Prepare vault filter if provided
        VAULT_FILTER=""
        if [ -n "{{.VAULT_NAME}}" ]; then
          VAULT_FILTER="--vault=\"{{.VAULT_NAME}}\""
        fi

        # Store the file in 1Password
        eval "op document create \"$INPUT_PATH\" --title=\"$DOCUMENT_TITLE\" $VAULT_FILTER"

        # If OUTPUT_FILE is specified, also create a .op reference file
        if [ -n "{{.OUTPUT_FILE}}" ]; then
          OUTPUT_PATH=$(eval echo "{{.OUTPUT_FILE}}")
          echo "# This file is stored in 1Password" > "$OUTPUT_PATH"
          echo "# Title: $DOCUMENT_TITLE" >> "$OUTPUT_PATH"
          echo "# To retrieve: task decrypt-file DOCUMENT_TITLE=\"$DOCUMENT_TITLE\"" >> "$OUTPUT_PATH"
          echo "File encrypted and reference saved to $OUTPUT_PATH"
        fi

  decrypt-file:
    desc: "Decrypt a file from 1Password"
    deps:
      - ensure-dependencies
    vars:
      DOCUMENT_TITLE: "{{.DOCUMENT_TITLE | default \"\"}}"
      DOCUMENT_ID: "{{.DOCUMENT_ID | default \"\"}}"
      OUTPUT_FILE: "{{.OUTPUT_FILE | default \"\"}}"
      VAULT_NAME: "{{.VAULT_NAME | default \"\"}}"
    cmds:
      - |
        # Ensure either DOCUMENT_TITLE or DOCUMENT_ID is provided
        if [ -z "{{.DOCUMENT_TITLE}}" ] && [ -z "{{.DOCUMENT_ID}}" ]; then
          echo "Please specify either the document title using DOCUMENT_TITLE or the document ID using DOCUMENT_ID."
          exit 1
        fi

        # Prepare vault filter if provided
        VAULT_FILTER=""
        if [ -n "{{.VAULT_NAME}}" ]; then
          VAULT_FILTER="--vault=\"{{.VAULT_NAME}}\""
        fi

        # Set identifier based on what was provided
        if [ -n "{{.DOCUMENT_TITLE}}" ]; then
          IDENTIFIER="{{.DOCUMENT_TITLE}}"
        else
          IDENTIFIER="{{.DOCUMENT_ID}}"
        fi

        # Set OUTPUT_FILE if not provided
        if [ -z "{{.OUTPUT_FILE}}" ]; then
          if [ -n "{{.DOCUMENT_TITLE}}" ]; then
            OUTPUT_FILE="{{.DOCUMENT_TITLE}}"
          else
            OUTPUT_FILE="document_from_1password"
          fi
        else
          OUTPUT_FILE=$(eval echo "{{.OUTPUT_FILE}}")
        fi

        # Retrieve the document from 1Password
        eval "op document get \"$IDENTIFIER\" $VAULT_FILTER --output=\"$OUTPUT_FILE\""

        echo "Document retrieved and saved to $OUTPUT_FILE"

  delete-secret:
    desc: "Delete a secret from 1Password"
    deps:
      - ensure-dependencies
    vars:
      SECRET_NAME: "{{.SECRET_NAME | default \"\"}}"
      VAULT_NAME: "{{.VAULT_NAME | default \"\"}}"
    cmds:
      - |
        # Check required parameters
        if [ -z "{{.SECRET_NAME}}" ]; then
          echo "Please specify the secret name using the SECRET_NAME variable."
          exit 1
        fi

        # Prepare vault filter if provided
        VAULT_FILTER=""
        if [ -n "{{.VAULT_NAME}}" ]; then
          VAULT_FILTER="--vault=\"{{.VAULT_NAME}}\""
        fi

        # Ask for confirmation
        read -p "Are you sure you want to delete '{{.SECRET_NAME}}'? (y/N) " -n 1 -r
        echo    # Move to a new line
        if [[ $REPLY =~ ^[Yy]$ ]]; then
          # Delete the secret
          eval "op item delete \"{{.SECRET_NAME}}\" $VAULT_FILTER"
          echo "Secret '{{.SECRET_NAME}}' deleted."
        else
          echo "Operation cancelled."
        fi

  list-secrets:
    desc: "List secrets in a vault"
    deps:
      - ensure-dependencies
    vars:
      VAULT_NAME: "{{.VAULT_NAME | default \"\"}}"
      CATEGORY: "{{.CATEGORY | default \"\"}}"
    cmds:
      - |
        # Prepare vault filter if provided
        VAULT_FILTER=""
        if [ -n "{{.VAULT_NAME}}" ]; then
          VAULT_FILTER="--vault=\"{{.VAULT_NAME}}\""
        fi

        # Prepare category filter if provided
        CATEGORY_FILTER=""
        if [ -n "{{.CATEGORY}}" ]; then
          CATEGORY_FILTER="--categories=\"{{.CATEGORY}}\""
        fi

        # List the items
        eval "op item list $VAULT_FILTER $CATEGORY_FILTER"
