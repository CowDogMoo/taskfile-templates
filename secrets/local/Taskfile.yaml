---
version: "3"

tasks:
  ensure-dependencies:
    desc: "Verify that sops and age are installed"
    cmds:
      - |
        if ! command -v sops &> /dev/null; then
          echo "'sops' command not found. Please install sops: https://github.com/mozilla/sops"
          exit 1
        fi
        if ! command -v age &> /dev/null; then
          echo "'age' command not found. Please install age: https://github.com/FiloSottile/age"
          exit 1
        fi

  create-age-keypair:
    desc: "Generate a new age keypair and save it to ~/.config/sops/age/keys.txt"
    deps:
      - ensure-dependencies
    vars:
      AGE_DIR: "{{.AGE_DIR | default \"$HOME/.config/sops/age\"}}"
      AGE_FILE: "{{.AGE_FILE | default \"$HOME/.config/sops/age/keys.txt\"}}"
    cmds:
      - |
        # Ensure the age directory exists
        mkdir -p "{{.AGE_DIR}}"

        # Generate a new age keypair
        age-keygen -o "{{.AGE_FILE}}"

        echo "Age keypair generated and saved to {{.AGE_FILE}}"
        echo "Your public key is:"
        grep "^# public key: " "{{.AGE_FILE}}" | sed 's/# public key: //'

  encrypt-file:
    desc: "Encrypt a file using sops with age"
    deps:
      - ensure-dependencies
    vars:
      AGE_FILE: "{{.AGE_FILE | default \"$HOME/.config/sops/age/keys.txt\"}}"
      INPUT_FILE: "{{.INPUT_FILE | default \"\"}}"
      OUTPUT_FILE: "{{.OUTPUT_FILE | default \"\"}}"
      ENCRYPTED_REGEX: "{{.ENCRYPTED_REGEX | default \"(age_key|allowed_cidrs|cloudflare|porkbun|tailscale|goad|individual|opensearch)\"}}"
    cmds:
      - |
        # Check if age key exists
        KEY_FILE="{{.AGE_FILE}}"
        if [ ! -f "$KEY_FILE" ]; then
          echo "Age key not found at $KEY_FILE. Please run 'task create-age-keypair' first."
          exit 1
        fi
        # Ensure INPUT_FILE is provided
        if [ -z "{{.INPUT_FILE}}" ]; then
          echo "Please specify the input file to encrypt using the INPUT_FILE variable."
          exit 1
        fi
        # Expand the tilde in input path
        INPUT_PATH=$(eval echo "{{.INPUT_FILE}}")

        # Set OUTPUT_FILE if not provided
        if [ -z "{{.OUTPUT_FILE}}" ]; then
          OUTPUT_FILE="${INPUT_PATH%.dec}"
          if [[ "$OUTPUT_FILE" == "$INPUT_PATH" ]]; then
            OUTPUT_FILE="${INPUT_PATH}.sops.yaml"
          fi
        else
          OUTPUT_FILE=$(eval echo "{{.OUTPUT_FILE}}")
        fi
        # Get the public key
        PUBLIC_KEY=$(grep "^# public key: " "$KEY_FILE" | sed 's/# public key: //')

        # Encrypt the file using sops with explicit age key and encrypted regex
        # Remove --in-place flag since we're using a separate output file
        sops --encrypt --age="$PUBLIC_KEY" --encrypted-regex="{{.ENCRYPTED_REGEX}}" "$INPUT_PATH" > "$OUTPUT_FILE"
        echo "Encrypted file saved to $OUTPUT_FILE"

  decrypt-file:
    desc: "Decrypt a file using sops with age"
    deps:
      - ensure-dependencies
    vars:
      AGE_FILE: "{{.AGE_FILE | default (env \"SOPS_AGE_KEY_FILE\" | default \"$HOME/.config/sops/age/keys.txt\")}}"
      INPUT_FILE: "{{.INPUT_FILE | default \"\"}}"
      OUTPUT_FILE: "{{.OUTPUT_FILE | default \"\"}}"
    cmds:
      - |
        # Check if age key exists
        KEY_FILE="{{.AGE_FILE}}"
        if [ ! -f "$KEY_FILE" ]; then
          echo "Age key not found at $KEY_FILE. Please run 'task create-age-keypair' first."
          exit 1
        fi

        # Ensure INPUT_FILE is provided
        if [ -z "{{.INPUT_FILE}}" ]; then
          echo "Please specify the input file to decrypt using the INPUT_FILE variable."
          exit 1
        fi

        # Expand the tilde in input path
        INPUT_PATH=$(eval echo "{{.INPUT_FILE}}")

        # Set OUTPUT_FILE if not provided
        if [ -z "{{.OUTPUT_FILE}}" ]; then
          OUTPUT_FILE="${INPUT_PATH}.dec"
        else
          OUTPUT_FILE=$(eval echo "{{.OUTPUT_FILE}}")
        fi

        # Decrypt the file using sops
        export SOPS_AGE_KEY_FILE="$KEY_FILE"
        sops -d "$INPUT_PATH" > "$OUTPUT_FILE"

        echo "Decrypted file saved to $OUTPUT_FILE"
