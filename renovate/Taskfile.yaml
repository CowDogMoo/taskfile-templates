---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"
includes:
  docker: "https://raw.githubusercontent.com/CowDogMoo/taskfile-templates/main/docker/Taskfile.yaml"

tasks:
  check-npx:
    desc: "Validate that npx is installed (for Node.js tasks)"
    cmds:
      - |
        if ! command -v npx &> /dev/null; then
          echo "'npx' command not found. Please install Node.js which includes npx: https://nodejs.org/en/download/"
          exit 1
        fi
    silent: true

  check-repository-format:
    desc: "Validate repository format matches org/repo pattern"
    cmds:
      - |
        if [[ ! "{{.REPOSITORY}}" =~ ^[A-Za-z0-9_.-]+/[A-Za-z0-9_.-]+$ ]]; then
          echo "Error: Repository format must be 'org/repo'. Got: {{.REPOSITORY}}"
          echo "Example: microsoft/vscode"
          exit 1
        fi
    silent: true

  docker-debug:
    desc: "Run Renovate in a Docker container with debugging enabled"
    deps:
      - check-repository-format
      - task: docker:check-docker
    vars:
      BRANCH: '{{.BRANCH | default "main"}}'
      GITHUB_TOKEN: '{{.GITHUB_TOKEN}}'
      REPOSITORY: '{{.REPOSITORY}}'
    requires:
      vars:
        - GITHUB_TOKEN
        - REPOSITORY
    cmds:
      - |
        # Define base directory explicitly
        BASE_DIR="${PWD}"
        echo "Base directory: $BASE_DIR"

        # Create cache directory if it doesn't exist
        mkdir -p "$BASE_DIR/.cache"

        # Extract org and repo for potential use in validation
        ORG=$(echo "{{.REPOSITORY}}" | cut -d'/' -f1)
        REPO=$(echo "{{.REPOSITORY}}" | cut -d'/' -f2)

        # Additional repository existence check if requested
        if [ "{{.VALIDATE_REPO | default "true"}}" = "true" ] && [ "{{.PLATFORM | default "github"}}" = "github" ]; then
          if ! gh repo view "{{.REPOSITORY}}" &>/dev/null; then
            echo "Error: Repository {{.REPOSITORY}} not found or not accessible"
            exit 1
          fi
        fi

        # Create a fresh Git repo for Renovate to work with
        TEMP_GIT_DIR="$BASE_DIR/.cache/renovate-git-repo"
        echo "Preparing fresh git repository for Renovate at $TEMP_GIT_DIR"
        rm -rf "$TEMP_GIT_DIR"
        mkdir -p "$TEMP_GIT_DIR"
        cd "$TEMP_GIT_DIR"

        # Clone the target repository with the specified branch
        echo "Cloning {{.REPOSITORY}} (branch: $BRANCH) into temporary directory..."
        git clone --depth=1 --branch "$BRANCH" "https://x-access-token:${GITHUB_TOKEN}@github.com/{{.REPOSITORY}}.git" . || {
          echo "Error: Branch '$BRANCH' not found. Falling back to default branch."
          git clone --depth=1 "https://x-access-token:${GITHUB_TOKEN}@github.com/{{.REPOSITORY}}.git" .
        }

        # Initialize submodules if needed
        if [ "{{.INIT_SUBMODULES | default "true"}}" = "true" ] && [ -f ".gitmodules" ]; then
          echo "Initializing git submodules..."
          git submodule update --init --recursive
        fi

        CONFIG_PATH="$BASE_DIR/{{.CONFIG_FILE_PATH | default ".github/renovate.json5"}}"
        echo ""
        echo "IMPORTANT: To test your local Renovate configuration changes, you must:"
        echo "  1. Push your configuration to the remote branch '$BRANCH' in {{.REPOSITORY}}"
        echo "  2. OR specify a different branch using the BRANCH parameter where your config changes exist"
        echo ""
        echo "Without pushing your changes, this will test the configuration already present in the repository."
        echo ""

        # Copy renovate config to the temporary repo
        if [ -f "$CONFIG_PATH" ]; then
          mkdir -p "$(dirname "{{.CONFIG_FILE_PATH | default ".github/renovate.json5"}}")"
          cp "$CONFIG_PATH" "{{.CONFIG_FILE_PATH | default ".github/renovate.json5"}}"
          echo "Copied local renovate config from $CONFIG_PATH to the temporary repository."
          echo "NOTE: This local copy will override what's in the remote repository for this test run only."
        fi

        # Return to original directory
        cd "$BASE_DIR"

        # Create temporary gitconfig for the container
        TMP_GITCONFIG="$BASE_DIR/.cache/tmp_gitconfig"
        echo "[safe]" > "$TMP_GITCONFIG"
        echo "  directory = /tmp/renovate/repository" >> "$TMP_GITCONFIG"
        echo "[url \"https://github.com/\"]" >> "$TMP_GITCONFIG"
        echo "  insteadOf = git@github.com:" >> "$TMP_GITCONFIG"
        echo "[credential]" >> "$TMP_GITCONFIG"
        echo "  helper = store" >> "$TMP_GITCONFIG"

        # Create git credentials file
        GIT_CREDENTIALS_FILE="$BASE_DIR/.cache/git-credentials"
        rm -rf "$GIT_CREDENTIALS_FILE"  # Remove in case it's a directory
        echo "https://x-access-token:${GITHUB_TOKEN}@github.com" > "$GIT_CREDENTIALS_FILE"

        # Run Renovate in Docker with configurable parameters
        docker run --rm -it \
          -e LOG_LEVEL="{{.LOG_LEVEL | default "debug"}}" \
          -e RENOVATE_LOCAL_DIR="/tmp/renovate/repository" \
          -e RENOVATE_CONFIG_FILE="/usr/src/app/renovate.json5" \
          -e RENOVATE_DEBUG="{{.DEBUG | default "true"}}" \
          -e RENOVATE_PLATFORM_COMMIT="{{.PLATFORM_COMMIT | default "true"}}" \
          -e RENOVATE_ONBOARDING_CONFIG_FILE_NAME="{{.CONFIG_FILE_NAME | default ".github/renovate.json5"}}" \
          -e RENOVATE_BASE_DIR="/tmp/renovate/repository" \
          -e RENOVATE_GIT_AUTHOR="{{.GIT_AUTHOR | default "Renovate Bot <bot@renovateapp.com>"}}" \
          -e RENOVATE_TOKEN="${GITHUB_TOKEN}" \
          -e RENOVATE_PLATFORM="{{.PLATFORM | default "github"}}" \
          -e RENOVATE_ENDPOINT="{{.ENDPOINT | default "https://api.github.com"}}" \
          -e RENOVATE_REPOSITORY="{{.REPOSITORY}}" \
          -e RENOVATE_FORK="{{.FORK | default "false"}}" \
          -e RENOVATE_INCLUDE_SUBMODULES="{{.INCLUDE_SUBMODULES | default "true"}}" \
          -e RENOVATE_TARGET_BRANCH="$BRANCH" \
          -e GIT_CONFIG_GLOBAL="/tmp/gitconfig" \
          -e HOME="/tmp" \
          -e XDG_CONFIG_HOME="/tmp/config" \
          -e GIT_TERMINAL_PROMPT=0 \
          -e GIT_ASKPASS=/bin/echo \
          -v "$CONFIG_PATH:/usr/src/app/renovate.json5" \
          -v "$TEMP_GIT_DIR:/tmp/renovate/repository" \
          -v "$BASE_DIR/.cache:/tmp/renovate/cache" \
          -v "$TMP_GITCONFIG:/tmp/gitconfig" \
          -v "$GIT_CREDENTIALS_FILE:/tmp/.git-credentials" \
          {{.DOCKER_EXTRA_FLAGS | default ""}} \
          --user=$(id -u):$(id -g) \
          {{.RENOVATE_IMAGE | default "ghcr.io/renovatebot/renovate:latest"}} \
          {{.REPOSITORY}} | tee "$BASE_DIR/{{.LOG_FILE | default "renovate-debug.log"}}"

        # Clean up sensitive files and cache if requested
        if [ "{{.CLEANUP | default "true"}}" = "true" ]; then
          echo "Cleaning up temporary files and sensitive data..."
          rm -rf "$BASE_DIR/.cache/git-credentials"
          rm -f "$BASE_DIR/.cache/tmp_gitconfig"

          # Optionally remove all cache - can add parameter to control this
          if [ "{{.CLEANUP_ALL | default "false"}}" = "true" ]; then
            echo "Removing all cached files..."
            rm -rf "$BASE_DIR/.cache"
          else
            # Just clean up the git repo to save space
            rm -rf "$TEMP_GIT_DIR"
          fi
        fi

  lint:
    desc: "Validate Renovate configuration using renovate-config-validator"
    deps:
      - check-npx
    cmds:
      - |
        echo "Validating Renovate configuration..."

        # Determine the config file path
        CONFIG_PATH="{{.CONFIG_FILE_PATH | default ".github/renovate.json5"}}"

        # Check if config file exists
        if [ ! -f "$CONFIG_PATH" ]; then
          echo "Error: Renovate configuration file not found at $CONFIG_PATH"
          exit 1
        fi

        # Run the validator
        npx --yes --package renovate -- renovate-config-validator "$CONFIG_PATH"

        if [ $? -eq 0 ]; then
          echo "✅ Renovate configuration is valid!"
        else
          echo "❌ Renovate configuration validation failed."
          exit 1
        fi
    silent: false
