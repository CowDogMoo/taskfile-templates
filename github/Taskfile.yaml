---
version: "3"

tasks:
  add-git-submodules:
    desc: "Add submodules from GitHub based on a naming pattern using gh cli"
    deps:
      - check-gh-cli
    silent: true
    cmds:
      - |
        # Automatically confirm remote Taskfile trust
        export TASK_CONFIRM="y"

        # Ensure Node.js is installed (required for the gh-submodule-add extension)
        if ! type -p node >/dev/null; then
          echo "Node.js is not installed. Please install it to continue."
          exit 1
        fi

        # Install the gh-submodule-add extension if not already installed
        if ! gh extension list | grep -q 'gh-submodule-add'; then
          gh extension install crguezl/gh-submodule-add
        fi

        # Create the target directory if it doesn't exist
        if [ -n "{{.TARGET_DIR}}" ]; then
          mkdir -p "{{.TARGET_DIR}}"
        fi

        # Clean up any existing submodule directories that may cause conflicts
        if [ -n "{{.REGEXP}}" ]; then
          for repo in $(ls | grep '{{.REGEXP}}'); do
            if [ -d "$repo" ]; then
              rm -rf "$repo"
            fi
          done
        fi

        # Fetch the repository URLs and add them as submodules
        response=$(gh api graphql -F query='query { repositoryOwner(login:"{{.ORG}}") { repositories(first: 100) { nodes { name url } } } }')

        # Debugging output to check the response
        echo "GraphQL response: $response"

        if [[ -z "$response" || "$response" == "null" ]]; then
          echo "Error: No response from GitHub API. Please check the organization name and your GitHub authentication."
          exit 1
        fi

        # Use the gh-submodule-add extension to add all matching submodules with proper options
        echo "$response" | jq -r '.data.repositoryOwner.repositories.nodes[]? | select(.name | test("{{.REGEXP}}")) | .url' | while read -r repo_url; do
          if [ -n "$repo_url" ]; then
            repo_name=$(basename "$repo_url")
            git submodule add "$repo_url" "{{.TARGET_DIR}}/$repo_name"
          fi
        done

        # Sync the submodule paths in .gitmodules
        git submodule sync
    requires:
      vars: ['ORG', 'REGEXP', 'TARGET_DIR']

  check-gh-cli:
    desc: "Validate that the GitHub CLI (gh) is installed"
    cmds:
      - |
        if ! command -v gh &> /dev/null; then
          echo "'gh' command not found. Please install GitHub CLI: https://cli.github.com"
          exit 1
        fi
    silent: true

  create-release:
    desc: "Create a release on GitHub"
    deps:
      - check-gh-cli
    cmds:
      - |
        # Check if NEXT_VERSION is set
        if [ -z "$NEXT_VERSION" ]; then
          echo "'NEXT_VERSION' environment variable not set. Example: NEXT_VERSION=1.0.0"
          exit 1
        fi

        # Create GitHub release
        echo "Creating release $NEXT_VERSION"
        gh release create $NEXT_VERSION -F changelogs/CHANGELOG.rst
    requires:
      vars: ['NEXT_VERSION']

  remove-git-submodules:
    desc: "Remove one or more submodules and clean up related files"
    deps:
      - check-gh-cli
    silent: true
    cmds:
      - |
        # Set the submodule path variable
        export SUBMODULE_PATH="{{.SUBMODULE_PATH}}"

        # Validate that the submodule path is provided
        if [ -z "$SUBMODULE_PATH" ]; then
          echo "Submodule path is required. Set the SUBMODULE_PATH variable."
          exit 1
        fi

        # Deinitialize the specified submodule(s) from .gitmodules
        git submodule deinit -f -- "$SUBMODULE_PATH"

        # Check if the deinit command was successful
        if [ $? -ne 0 ]; then
          echo "Failed to deinitialize submodule at $SUBMODULE_PATH."
          exit 1
        fi

        # Remove the submodule directory from the Git repository
        if [ -d ".git/modules/$SUBMODULE_PATH" ]; then
          rm -rf ".git/modules/$SUBMODULE_PATH"
        fi

        # Remove the submodule directory from the working tree
        git rm -rf "$SUBMODULE_PATH"

        # Check if the git rm command was successful
        if [ $? -ne 0 ]; then
          echo "Failed to remove submodule directory at $SUBMODULE_PATH from working tree."
          exit 1
        fi

        # Clean up .gitmodules file if any submodule references remain
        git config -f .gitmodules --remove-section "submodule.$SUBMODULE_PATH" || true

        # Sync the submodule paths in .gitmodules to reflect the changes
        git submodule sync

        # Check if there are any changes to commit
        if git diff --cached --quiet; then
          echo "No changes to commit. Submodule removal may not have made any modifications."
        fi
    requires:
      vars: ['SUBMODULE_PATH']
