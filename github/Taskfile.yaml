---
version: "3"

tasks:
  add-github-submodules:
    desc: "Add submodules from GitHub based on a naming pattern using gh cli"
    deps:
      - check-gh-cli
    vars:
      ORG: "" # Define the GitHub organization
      REGEXP: "" # Define the regular expression to match repositories
      TARGET_DIR: "" # Define the target directory for submodules
    silent: true
    cmds:
      - |
        # Automatically confirm remote Taskfile trust
        export TASK_CONFIRM="y"

        # Ensure Node.js is installed (required for the gh-submodule-add extension)
        if ! type -p node >/dev/null; then
          echo "Node.js is not installed. Please install it to continue."
          exit 1
        fi

        # Install the gh-submodule-add extension if not already installed
        if ! gh extension list | grep -q 'gh-submodule-add'; then
          gh extension install crguezl/gh-submodule-add
        fi

        # Create the target directory if it doesn't exist
        mkdir -p {{.TARGET_DIR}}

        # Clean up any existing submodule directories that may cause conflicts
        for repo in $(ls | grep '{{.REGEXP}}'); do
          if [ -d "$repo" ]; then
            rm -rf "$repo"
          fi
        done

        # Use the gh-submodule-add extension to add all matching submodules with proper options
        gh api graphql -F query='query { repositoryOwner(login:"{{.ORG}}") { repositories(first: 100) { nodes { name url } } } }' | jq -r '.data.repositoryOwner.repositories.nodes[] | select(.name | test("{{.REGEXP}}")) | .url' | while read -r repo_url; do
          repo_name=$(basename "$repo_url")
          git submodule add "$repo_url" "{{.TARGET_DIR}}/$repo_name"
        done

        # Sync the submodule paths in .gitmodules
        git submodule sync

  check-gh-cli:
    desc: "Validate that the GitHub CLI (gh) is installed"
    cmds:
      - |
        if ! command -v gh &> /dev/null; then
          echo "'gh' command not found. Please install GitHub CLI: https://cli.github.com"
          exit 1
        fi
    silent: true

  create-release:
    desc: "Create a release on GitHub"
    deps:
      - check-gh-cli
    vars:
      NEXT_VERSION: "" # Define the next version to release
    cmds:
      - |
        # Check if NEXT_VERSION is set
        if [ -z "$NEXT_VERSION" ]; then
          echo "'NEXT_VERSION' environment variable not set. Example: NEXT_VERSION=1.0.0"
          exit 1
        fi

        # Create GitHub release
        echo "Creating release $NEXT_VERSION"
        gh release create $NEXT_VERSION -F changelogs/CHANGELOG.rst

  remove-github-submodule:
    desc: "Remove a GitHub submodule and clean up related files"
    deps:
      - check-gh-cli
    vars:
      SUBMODULE_PATH: "" # Define the path to the submodule to remove
    silent: true
    cmds:
      - |
        # Set the submodule path variable
        export SUBMODULE_PATH="{{.SUBMODULE_PATH}}"

        # Validate that the submodule path is provided
        if [[ -z "$SUBMODULE_PATH" ]]; then
          echo "Submodule path is required. Set the SUBMODULE_PATH variable."
          exit 1
        fi

        # Remove the submodule entry from .gitmodules
        git submodule deinit -f -- "$SUBMODULE_PATH"

        # Remove the submodule directory from the repository
        rm -rf ".git/modules/$SUBMODULE_PATH"

        # Remove the submodule directory from the working tree
        git rm -f "$SUBMODULE_PATH"

        # Clean up .gitmodules file if it still contains any submodule references
        git config -f .gitmodules --remove-section "submodule.$SUBMODULE_PATH" || true

        # Sync the submodule paths in .gitmodules
        git submodule sync

        # Commit the changes
        git commit -m "Removed submodule at $SUBMODULE_PATH"
