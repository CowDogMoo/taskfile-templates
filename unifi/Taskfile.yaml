---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  # The UBIQUITI_CONTROLLER_HOST should be provided via environment variable
  # or explicitly set when running the task
  UBIQUITI_CONTROLLER_HOST: '{{.UBIQUITI_CONTROLLER_HOST | default "localhost"}}'
  UBIQUITI_BASE_URL: "https://{{.UBIQUITI_CONTROLLER_HOST}}"

tasks:
  check-dependencies:
    desc: "Validate that required tools are installed"
    cmds:
      - |
        if ! command -v curl &> /dev/null; then
          echo "'curl' command not found. Please install curl"
          exit 1
        fi
        if ! command -v jq &> /dev/null; then
          echo "'jq' command not found. Please install jq"
          exit 1
        fi
        if ! command -v op &> /dev/null; then
          echo "'op' command not found. Please install 1Password CLI"
          exit 1
        fi
    silent: true

  default:
    desc: "List available Ubiquiti commands"
    cmds:
      - task --list

  list-sites:
    desc: "List all Ubiquiti sites"
    deps:
      - check-dependencies
    cmds:
      - |
        set -euo pipefail
        API_KEY=$(op item get "Ubiquiti Account" --reveal --fields control-plane-api-key)
        curl -sk -X GET "{{.UBIQUITI_BASE_URL}}/proxy/network/integration/v1/sites" \
          -H "Accept: application/json" \
          -H "X-API-KEY: $API_KEY" | jq '.'

  list-unifi-devices:
    desc: "List adopted Unifi devices in the default site"
    deps:
      - check-dependencies
    cmds:
      - |
        set -euo pipefail
        API_KEY=$(op item get "Ubiquiti Account" --reveal --fields control-plane-api-key)
        SITE_ID=$(curl -sk -X GET "{{.UBIQUITI_BASE_URL}}/proxy/network/integration/v1/sites" \
          -H "Accept: application/json" \
          -H "X-API-KEY: $API_KEY" | jq -r '.data[0].id')
        curl -sk -X GET "{{.UBIQUITI_BASE_URL}}/proxy/network/integration/v1/sites/${SITE_ID}/devices" \
          -H "Accept: application/json" \
          -H "X-API-KEY: $API_KEY" | jq '.'

  list-clients:
    desc: "List all clients in the default site. Optionally filter by network name"
    deps:
      - check-dependencies
    vars:
      NETWORK: '{{.NETWORK | default ""}}'
    cmds:
      - |
        set -euo pipefail
        API_KEY=$(op item get "Ubiquiti Account" --reveal --fields control-plane-api-key)
        if [ -z "{{.NETWORK}}" ]; then
          curl -sk -X GET "{{.UBIQUITI_BASE_URL}}/proxy/network/api/s/default/stat/sta" \
            -H "Accept: application/json" \
            -H "X-API-KEY: $API_KEY" | jq '.'
        else
          curl -sk -X GET "{{.UBIQUITI_BASE_URL}}/proxy/network/api/s/default/stat/sta" \
            -H "Accept: application/json" \
            -H "X-API-KEY: $API_KEY" | jq --arg network "{{.NETWORK}}" '.data[] | select(.network == $network)'
        fi

  list-fw-rules:
    desc: "List firewall rules"
    deps:
      - check-dependencies
    cmds:
      - |
        set -euo pipefail
        API_KEY=$(op item get "Ubiquiti Account" --reveal --fields control-plane-api-key)
        curl -sk -X GET "{{.UBIQUITI_BASE_URL}}/proxy/network/api/s/default/rest/firewallrule" \
          -H "Accept: application/json" \
          -H "X-API-KEY: $API_KEY" | jq '.'

  list-networks:
    desc: "List all networks including VLANs. Use REDACT=true to mask sensitive keys and passwords"
    deps:
      - check-dependencies
    vars:
      REDACT: '{{.REDACT | default "false"}}'
    cmds:
      - |
        set -euo pipefail
        API_KEY=$(op item get "Ubiquiti Account" --reveal --fields control-plane-api-key)

        # Build JQ filter based on redaction setting
        if [ "{{.REDACT}}" = "true" ]; then
          FILTER='with_entries(
            if .key | test("(x_.*key|x_.*secret|pre_shared_key)"; "i") then
              .value = "REDACTED"
            else
              .
            end
          )'
        else
          FILTER='.'
        fi

        # First try the networks endpoint if available
        RESPONSE=$(curl -sk -X GET "{{.UBIQUITI_BASE_URL}}/proxy/network/api/s/default/rest/networkconf" \
          -H "Accept: application/json" \
          -H "X-API-KEY: $API_KEY")

        # Check if we got a valid response
        if [ "$(echo "$RESPONSE" | jq -r '.meta.rc')" = "ok" ]; then
          echo "$RESPONSE" | jq ".data[] | $FILTER"
        else
          # Fallback to settings endpoint
          curl -sk -X GET "{{.UBIQUITI_BASE_URL}}/proxy/network/api/s/default/rest/setting" \
            -H "Accept: application/json" \
            -H "X-API-KEY: $API_KEY" | jq ".data | map(select(.key == \"networks\")) | .[].value[] | $FILTER"
        fi

  list-wlans:
    desc: "List all configured wireless networks (WLANs). Use REDACT=true to mask sensitive keys and passwords"
    deps:
      - check-dependencies
    vars:
      REDACT: '{{.REDACT | default "false"}}'
    cmds:
      - |
        set -euo pipefail
        API_KEY=$(op item get "Ubiquiti Account" --reveal --fields control-plane-api-key)

        # Build JQ filter based on redaction setting
        if [ "{{.REDACT}}" = "true" ]; then
          FILTER='with_entries(
            if .key | IN("private_preshared_keys", "x_passphrase", "x_iapp_key", "site_id") then
              .value = "REDACTED"
            else
              .
            end
          )'
        else
          FILTER='.'
        fi

        curl -sk -X GET "{{.UBIQUITI_BASE_URL}}/proxy/network/api/s/default/rest/wlanconf" \
          -H "Accept: application/json" \
          -H "X-API-KEY: $API_KEY" | jq ".data[] | $FILTER"
