---
version: "3"

tasks:
  changelog-lint:
    desc: "Lint the changelog"
    cmds:
      - antsibull-changelog lint

  changelog-release:
    desc: "Generate the changelog release"
    deps: [update-galaxy-version]
    cmds:
      - antsibull-changelog release --version $NEXT_VERSION

  gen-changelog:
    desc: "Generate the changelog for the next release"
    cmds:
      - |
        if [ -z "$NEXT_VERSION" ]; then
          echo "'NEXT_VERSION' environment variable not set. Example: NEXT_VERSION=1.0.0"
          exit 1
        fi
      - echo "Generating changelog for release $NEXT_VERSION"
      - task: changelog-lint
      - task: changelog-release

  lint-ansible:
    desc: "Run Ansible Lint"
    cmds:
      - |
        echo "Running ansible-lint."
        ansible-lint --force-color -c .hooks/linters/ansible-lint.yaml
    silent: true

  ping:
    desc: "Ping: cross-OS, works on all/group/pattern/host specification, robust. Auto-detects Windows and Linux hosts."
    vars:
      INVENTORY: '{{.INVENTORY}}'
      HOSTS: '{{.HOSTS | default "all"}}'
      DEBUG: '{{.DEBUG | default "false"}}'
      OS_TYPE: '{{.OS_TYPE | default "auto"}}'
    cmds:
      - |
        # For explicit OS type, just use the appropriate module
        if [ "{{.OS_TYPE}}" = "windows" ]; then
          echo "Using win_ping module for all hosts (OS_TYPE=windows)"
          {{if eq .DEBUG "false"}}ANSIBLE_PYTHON_INTERPRETER=auto_silent {{end}}ansible {{.HOSTS}} -i "{{.INVENTORY}}" -m win_ping
          exit $?
        elif [ "{{.OS_TYPE}}" = "linux" ]; then
          echo "Using ping module for all hosts (OS_TYPE=linux)"
          {{if eq .DEBUG "false"}}ANSIBLE_PYTHON_INTERPRETER=auto_silent {{end}}ansible {{.HOSTS}} -i "{{.INVENTORY}}" -m ping
          exit $?
        fi

        # When OS_TYPE=auto (default), we need to handle mixed environments
        echo "Auto-detecting host types for ping..."

        # Check if we have Linux hosts
        echo "Pinging Linux hosts..."
        LINUX_RESULT=0
        LINUX_HOSTS=$(ansible -i "{{.INVENTORY}}" -m ping {{.HOSTS}} 2>/dev/null | grep SUCCESS | awk '{print $1}' | tr -d ':' | tr '\n' ',')
        if [ -n "$LINUX_HOSTS" ]; then
          echo "Successfully pinged Linux hosts: $LINUX_HOSTS"
        fi

        # Check if we have Windows hosts
        echo "Pinging Windows hosts..."
        WIN_RESULT=0
        WIN_HOSTS=$(ansible -i "{{.INVENTORY}}" -m win_ping {{.HOSTS}} 2>/dev/null | grep SUCCESS | awk '{print $1}' | tr -d ':' | tr '\n' ',')
        if [ -n "$WIN_HOSTS" ]; then
          echo "Successfully pinged Windows hosts: $WIN_HOSTS"
        fi

        # Print combined successful results
        echo "===== PING RESULTS ====="
        if [ -n "$LINUX_HOSTS" ]; then
          {{if eq .DEBUG "false"}}ANSIBLE_PYTHON_INTERPRETER=auto_silent {{end}}ansible -i "{{.INVENTORY}}" -m ping ${LINUX_HOSTS%,}
        fi

        if [ -n "$WIN_HOSTS" ]; then
          {{if eq .DEBUG "false"}}ANSIBLE_PYTHON_INTERPRETER=auto_silent {{end}}ansible -i "{{.INVENTORY}}" -m win_ping ${WIN_HOSTS%,}
        fi

        # Check if we covered all hosts
        SUCCESSFUL_HOSTS="$LINUX_HOSTS$WIN_HOSTS"
        if [ -z "$SUCCESSFUL_HOSTS" ]; then
          echo "ERROR: No hosts could be pinged with either ping or win_ping!"
          exit 1
        fi

        # Always exit successfully if at least one host was pinged
        exit 0
    silent: false

  run-molecule-tests:
    desc: "Run Molecule tests for all roles"
    cmds:
      - |
        mkdir -p logs
        export ANSIBLE_CONFIG=$(pwd)/ansible.cfg
        for role in roles/*; do
          if [[ -d "$role" ]]; then
            echo "Running molecule tests for role $role"
            (cd "$role" && molecule test) | tee -a logs/molecule_tests.log || exit 1
          fi
        done
    silent: true

  update-galaxy-version:
    desc: "Update version in galaxy.yml if it exists"
    cmds:
      - |
        if [ -z "$NEXT_VERSION" ]; then
          echo "'NEXT_VERSION' environment variable not set."
          exit 1
        fi
        if [ -f "galaxy.yml" ]; then
          yq e -i '.version = env(NEXT_VERSION)' galaxy.yml
          echo "Updated galaxy.yml version to $NEXT_VERSION"
        else
          echo "No galaxy.yml found, skipping version update"
        fi
    silent: true
