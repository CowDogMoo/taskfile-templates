---
version: "3"

tasks:
  check-terraform:
    desc: "Validate that Terraform is installed"
    cmds:
      - |
        if ! command -v terraform &> /dev/null; then
          echo "'terraform' command not found. Please install Terraform: https://www.terraform.io/downloads.html"
          exit 1
        fi
    silent: true

  check-terragrunt:
    desc: "Validate that Terragrunt is installed"
    cmds:
      - |
        if ! command -v terragrunt &> /dev/null; then
          echo "'terragrunt' command not found. Please install Terragrunt: https://terragrunt.gruntwork.io"
          exit 1
        fi
    silent: true

  lint:
    desc: "Run terraform fmt check and tflint on all terraform files"
    deps:
      - check-terraform
    cmds:
      - |
        echo "Running terraform fmt check"
        terraform fmt -check -recursive
        echo "Running tflint"
        find . -type f -name "*.tf" -exec dirname {} \; | uniq | while read dir; do
          (cd "$dir" && tflint)
        done
    silent: true

  changelog-init:
    desc: "Initialize changelog for terraform modules"
    cmds:
      - |
        if [ ! -f CHANGELOG.md ]; then
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## [Unreleased]" >> CHANGELOG.md
        fi
    silent: true

  changelog-release:
    desc: "Update changelog for release"
    vars:
      NEXT_VERSION:
        sh: if [ -z "$NEXT_VERSION" ]; then echo "Please set NEXT_VERSION"; exit 1; else echo "$NEXT_VERSION"; fi
    cmds:
      - task: changelog-init
      - |
        DATE=$(date +%Y-%m-%d)
        sed -i.bak "s/## \[Unreleased\]/## [Unreleased]\n\n## [$NEXT_VERSION] - ${DATE}/" CHANGELOG.md
        rm CHANGELOG.md.bak

  release:
    desc: "Prepare and validate terraform release"
    deps:
      - check-terraform
      - lint
    vars:
      NEXT_VERSION:
        sh: if [ -z "$NEXT_VERSION" ]; then echo "Please set NEXT_VERSION"; exit 1; else echo "$NEXT_VERSION"; fi
    cmds:
      - task: changelog-release
      - task: validate
      - |
        echo "Creating release tag v${NEXT_VERSION}"
        git tag -a "v${NEXT_VERSION}" -m "Release version ${NEXT_VERSION}"
        echo "To push the release, run: git push origin v${NEXT_VERSION}"

  terragrunt-apply:
    desc: "Apply a specific module in a specific environment using Terragrunt"
    deps:
      - check-terraform
      - check-terragrunt
    vars:
      DEPLOYMENT: '{{.DEPLOYMENT | default ""}}'
      ENV: '{{.ENV | default ""}}'
      MODULE: '{{.MODULE | default ""}}'
      REGION: '{{.REGION | default ""}}'
    cmds:
      - |
        # Check for required environment variables
        if [ -z "{{ .DEPLOYMENT }}" ] || [ -z "{{ .ENV }}" ] || [ -z "{{ .REGION }}" ]; then
          echo "Please provide all required variables: DEPLOYMENT, ENV, and REGION"
          exit 1
        fi

        BASE_PATH="dread-infra/{{ .DEPLOYMENT }}/{{ .ENV }}/{{ .REGION }}"

        # If MODULE is specified, run for specific module
        if [ ! -z "{{ .MODULE }}" ]; then
          echo "Running apply for module: {{ .MODULE }}"
          terragrunt apply \
            -auto-approve \
            --terragrunt-non-interactive \
            -lock=false \
            --terragrunt-working-dir "${BASE_PATH}/{{ .MODULE }}"
        else
          echo "Running default apply for all modules..."
          terragrunt run-all apply \
            -auto-approve \
            --terragrunt-non-interactive \
            -lock=false \
            --terragrunt-working-dir "$BASE_PATH"
        fi

  terragrunt-init:
    desc: "Initialize a specific module in a specific environment using Terragrunt"
    deps:
      - check-terraform
      - check-terragrunt
    vars:
      DEPLOYMENT: '{{.DEPLOYMENT | default ""}}'
      ENV: '{{.ENV | default ""}}'
      MODULE: '{{.MODULE | default ""}}'
      REGION: '{{.REGION | default ""}}'
    cmds:
      - |
        # Check for required environment variables
        if [ -z "{{ .DEPLOYMENT }}" ] || [ -z "{{ .ENV }}" ] || [ -z "{{ .REGION }}" ]; then
          echo "Please provide all required variables: DEPLOYMENT, ENV, and REGION"
          exit 1
        fi

        BASE_PATH="dread-infra/{{ .DEPLOYMENT }}/{{ .ENV }}/{{ .REGION }}"

        # If MODULE is specified, run for specific module
        if [ ! -z "{{ .MODULE }}" ]; then
          echo "Running init for module: {{ .MODULE }}"
          terragrunt init \
            --terragrunt-non-interactive \
            -lock=false \
            --terragrunt-working-dir "${BASE_PATH}/{{ .MODULE }}"
        else
          echo "Running default init for all modules..."
          terragrunt run-all init \
            --terragrunt-non-interactive \
            -lock=false \
            --terragrunt-working-dir "$BASE_PATH"
        fi

  terragrunt-destroy:
    desc: "Destroy a specific module in a specific environment using Terragrunt"
    deps:
      - check-terraform
      - check-terragrunt
    vars:
      DEPLOYMENT: '{{.DEPLOYMENT | default ""}}'
      ENV: '{{.ENV | default ""}}'
      MODULE: '{{.MODULE | default ""}}'
      REGION: '{{.REGION | default ""}}'
    cmds:
      - |
        # Check for required environment variables
        if [ -z "{{ .DEPLOYMENT }}" ] || [ -z "{{ .ENV }}" ] || [ -z "{{ .REGION }}" ]; then
          echo "Please provide all required variables: DEPLOYMENT, ENV, and REGION"
          exit 1
        fi

        BASE_PATH="dread-infra/{{ .DEPLOYMENT }}/{{ .ENV }}/{{ .REGION }}"

        # If MODULE is specified, run for specific module
        if [ ! -z "{{ .MODULE }}" ]; then
          echo "Running destroy for module: {{ .MODULE }}"
          terragrunt destroy \
            -auto-approve \
            --terragrunt-non-interactive \
            -lock=false \
            --terragrunt-working-dir "${BASE_PATH}/{{ .MODULE }}"
        else
          echo "Running default destroy for all modules..."
          terragrunt run-all destroy \
            -auto-approve \
            --terragrunt-non-interactive \
            -lock=false \
            --terragrunt-working-dir "$BASE_PATH"
        fi

  run-terratest:
    desc: "Run Terratest for infrastructure testing"
    deps:
      - check-terraform
    vars:
      TIMEOUT: '{{.TIMEOUT | default "60m"}}'
      DESTROY: '{{.DESTROY | default "true"}}'
      VERBOSE: '{{.VERBOSE | default "false"}}'
      LOG_TO_FILE: '{{.LOG_TO_FILE | default "false"}}'
      LOG_PATH: '{{.LOG_PATH | default "/tmp/terratest.log"}}'
    cmds:
      - |
        cd test
        go mod tidy
        export TERRATEST_DESTROY={{.DESTROY}}

        # Set up logging based on verbosity and logging preferences
        if [ "{{.VERBOSE}}" = "true" ]; then
          export TF_LOG=DEBUG
          if [ "{{.LOG_TO_FILE}}" = "true" ]; then
            export TF_LOG_PATH=./terraform.log
            go test -v -test.v -timeout={{.TIMEOUT}} | tee {{.LOG_PATH}}
          else
            go test -v -test.v -timeout={{.TIMEOUT}}
          fi
        else
          if [ "{{.LOG_TO_FILE}}" = "true" ]; then
            go test -timeout={{.TIMEOUT}} | tee {{.LOG_PATH}}
          else
            go test -timeout={{.TIMEOUT}}
          fi
        fi

  validate:
    desc: "Run Terraform validate to ensure configuration is syntactically correct"
    deps:
      - check-terraform
    cmds:
      - |
        terraform validate

  format:
    desc: "Format Terraform code"
    deps:
      - check-terraform
    cmds:
      - |
        terraform fmt -recursive
